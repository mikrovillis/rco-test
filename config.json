{
  "imageDecryptEval": "const tokenPattern=/dTfnT\\([^)]{0,28}\"([^\"]+)\"\\);/g;const validUrlPattern=/^[A-Za-z0-9._~:/?#\\[\\]@!$&\\x27()*+,;=%-]*$/;function findMostCommonOffset(tokens){if(tokens.length===0){return 0}const offsets=[];for(const token of tokens){let offset=0;while(offset<=20){try{const url=decodeAtOffset(token,offset);if(validUrlPattern.test(url)){offsets.push(offset);break}}catch(_){ }offset++}}if(offsets.length===0){throw new Error(\"No valid decoding found\")}return mostCommon(offsets)}function decodeAtOffset(token,offset){token=token.slice(offset);token=token.replace(/[A-Za-z]{2}__[A-Za-z0-9]{6}_/g,'g');token=token.substring(0,token.search(/=s\\d+\\?/));token=token.substring(15,33)+token.substring(50);token=token.substring(0,token.length-11)+token.slice(-2);token=atob(token);token=token.substring(0,13)+token.substring(17);token=token.slice(0,-2);return\"https://2.bp.blogspot.com/\"+token+\"=s0\"}function atob(input){const chars='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';let str=String(input).replace(/=+$/,'');if(str.length%4===1){throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\")}let output='';for(let bc=0,bs,buffer,i=0;(buffer=str.charAt(i++));~buffer&&(bs=bc%4?bs*64+buffer:buffer,bc++%4)?(output+=String.fromCharCode(255&bs>>(-2*bc&6))):0){buffer=chars.indexOf(buffer)}return output}function mostCommon(arr){const counts=new Map();let maxCount=0;let mostCommonValue;for(const item of arr){const count=(counts.get(item)||0)+1;counts.set(item,count);if(count>maxCount){maxCount=count;mostCommonValue=item}}return mostCommonValue}const tokens=[..._encryptedString.matchAll(tokenPattern)].map(m=>m[1])||[];const offset=findMostCommonOffset(tokens);JSON.stringify(tokens.map(token=>decodeAtOffset(token,offset)));",
  "postDecryptEval": null,
  "shouldVerifyLinks": false
}
